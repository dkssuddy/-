#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>
using namespace std;

int ans=0;
int visited[101]={0, };
vector <int> rout[101];

void bfs()
{
	queue <int> q;
	
	q.push(1);
	visited[1]=1;
	
	while(!q.empty())
	{
		int here= q.front();
		q.pop();
		
		for(int i=0;i<rout[here].size();i++)
		{
			int there=rout[here][i];
			if(!visited[there])
			{
				q.push(there);
				visited[there]=1;
			}
		}
	}
	
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	int com,node;
	cin >> com >> node;
	
	for(int i=0;i<node;i++)
	{
		int a,b;
		cin >> a >> b;
		rout[a].push_back(b);
		rout[b].push_back(a);
	}
	
	for(int i=1;i<=com;i++)
		sort(rout[i].begin(),rout[i].end());
		
	bfs();
	
	for(int i=2;i<=100;i++)
		if(visited[i]==1)
			ans++;
	cout<< ans;
	
	return 0;
}
